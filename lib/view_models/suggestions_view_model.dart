import 'dart:async';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';

class SuggestionsViewModel extends ChangeNotifier {
  final String uid;
  SuggestionsViewModel({required this.uid});

  bool loading = true;
  String? error;

  // C√≥ entry g·∫ßn nh·∫•t hay kh√¥ng
  bool hasEntry = false;
  String label = 'Kh√¥ng r√µ';

  // % m·ª©c ƒë·ªô t√≠ch c·ª±c hi·ªÉn th·ªã (0..1)
  double percent = 0.0;

  // Danh s√°ch g·ª£i √Ω hi·ªÉn th·ªã
  List<String> suggestions = const [];

  StreamSubscription<QuerySnapshot<Map<String, dynamic>>>? _sub;

  void start() {
    loading = true;
    error = null;
    notifyListeners();

    _sub?.cancel();
    _sub = FirebaseFirestore.instance
        .collection('users')
        .doc(uid)
        .collection('diaries')
        .orderBy('createdAt', descending: true)
        .limit(1)
        .snapshots()
        .listen(
          (snap) {
            try {
              if (snap.docs.isEmpty) {
                _setEmpty();
                return;
              }

              final m = snap.docs.first.data();

              // L·∫•y feeling/label
              final selectedFeeling = (m['selectedFeeling'] as String?)?.trim();
              final textSentiment = (m['textSentiment'] as String?)?.trim();
              final textScore =
                  (m['textSentimentScore'] is num)
                      ? (m['textSentimentScore'] as num).toDouble()
                      : null;

              // imageEmotions[0]
              final List imageEmotions =
                  (m['imageEmotions'] as List?) ?? const [];
              Map<String, dynamic> img0 = {};
              if (imageEmotions.isNotEmpty && imageEmotions.first is Map) {
                img0 = Map<String, dynamic>.from(imageEmotions.first as Map);
              }
              final overallEmotion =
                  (img0['overallEmotion'] as String?)?.trim();
              final confidence =
                  (img0['confidence'] is num)
                      ? (img0['confidence'] as num).toDouble()
                      : null;
              final Map<String, dynamic> scores =
                  (img0['scores'] is Map)
                      ? Map<String, dynamic>.from(img0['scores'])
                      : {};

              // Nh√£n ∆∞u ti√™n: selectedFeeling -> textSentiment -> overallEmotion
              final computedLabel =
                  selectedFeeling ??
                  _vnSentiment(textSentiment) ??
                  _vnEmotion(overallEmotion) ??
                  'Kh√¥ng r√µ';

              // % ∆∞u ti√™n: textScore -> scores[label] -> confidence
              double? p = textScore;
              if (p == null && scores.isNotEmpty) {
                final enKey = _enEmotionFromVN(computedLabel);
                if (enKey != null && scores[enKey] is num) {
                  p = (scores[enKey] as num).toDouble();
                }
              }
              p ??= confidence ?? 0.0;
              p = p.clamp(0.0, 1.0);

              // G·ª£i √Ω
              final rawSugs = (m['suggestions'] as List?) ?? const [];
              final sugList =
                  rawSugs
                      .whereType<String>()
                      .map((e) => e.trim())
                      .where((e) => e.isNotEmpty)
                      .toList();

              label = computedLabel;
              percent = p;
              suggestions = sugList.isEmpty ? _fallback() : sugList;
              hasEntry = true;
              loading = false;
              error = null;
              notifyListeners();
            } catch (e) {
              loading = false;
              error = e.toString();
              notifyListeners();
            }
          },
          onError: (e) {
            loading = false;
            error = e.toString();
            notifyListeners();
          },
        );
  }

  void _setEmpty() {
    hasEntry = false;
    label = 'Ch∆∞a c√≥ d·ªØ li·ªáu';
    percent = 0.0;
    suggestions = _fallback();
    loading = false;
    error = null;
    notifyListeners();
  }

  List<String> _fallback() => const [
    "üé∂ Nghe m·ªôt b·∫£n nh·∫°c b·∫°n y√™u th√≠ch.",
    "üìì Ghi l·∫°i 3 ƒëi·ªÅu b·∫°n bi·∫øt ∆°n h√¥m nay.",
    "üö∂ ƒêi d·∫°o 10‚Äì15 ph√∫t ƒë·ªÉ th∆∞ gi√£n.",
  ];

  // Map sentiment EN ‚Üí VN
  String? _vnSentiment(String? s) {
    switch ((s ?? '').toLowerCase()) {
      case 'positive':
        return 'Vui v·∫ª';
      case 'negative':
        return 'Ti√™u c·ª±c';
      case 'neutral':
        return 'B√¨nh th∆∞·ªùng';
    }
    return null;
  }

  // Map emotion EN ‚Üí VN
  String? _vnEmotion(String? e) {
    switch ((e ?? '').toLowerCase()) {
      case 'happy':
        return 'Vui v·∫ª';
      case 'sad':
        return 'Bu·ªìn';
      case 'angry':
        return 'T·ª©c gi·∫≠n';
      case 'fear':
        return 'Lo l·∫Øng';
      case 'disgust':
        return 'Kh√≥ ch·ªãu';
      case 'surprise':
        return 'Ng·∫°c nhi√™n';
      case 'neutral':
        return 'B√¨nh th∆∞·ªùng';
    }
    return null;
  }

  // D√≤ key EN t·ª´ label VN ƒë·ªÉ tra scores
  String? _enEmotionFromVN(String vn) {
    final v = vn.toLowerCase();
    if (v.contains('vui')) return 'happy';
    if (v.contains('bu·ªìn')) return 'sad';
    if (v.contains('gi·∫≠n') || v.contains('t·ª©c')) return 'angry';
    if (v.contains('lo l·∫Øng')) return 'fear';
    if (v.contains('kh√≥ ch·ªãu') || v.contains('gh√™') || v.contains('ch√°n gh√©t'))
      return 'disgust';
    if (v.contains('ng·∫°c nhi√™n')) return 'surprise';
    if (v.contains('b√¨nh th∆∞·ªùng')) return 'neutral';
    if (v.contains('ti√™u c·ª±c')) return 'negative';
    return null;
  }

  @override
  void dispose() {
    _sub?.cancel();
    super.dispose();
  }
}
